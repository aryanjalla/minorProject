# -*- coding: utf-8 -*-
"""DiabetesPrediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DGxluITVHlt3upSCIefhRfCR86NxSPK2
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.preprocessing import StandardScaler
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from sklearn.metrics import confusion_matrix
from sklearn.svm import SVC
from imblearn.over_sampling import SMOTE
from imblearn.under_sampling import RandomUnderSampler
from imblearn.pipeline import Pipeline
from collections import Counter

from google.colab import drive
drive.mount('/content/drive')

data = pd.read_csv("drive/MyDrive/DiabetesData/diabetes75pc_100_times.csv")

data["Outcome"].value_counts()

data.info()

X = data.drop("Outcome", axis=1)
y = data["Outcome"]

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=10)

X_train.shape

columns = ["Pregnancies", "Glucose", "BloodPressure", "SkinThickness", "Insulin", "BMI", "DiabetesPedigreeFunction", "Age"]

scaler = StandardScaler()
scaled_data = scaler.fit_transform(X_train)

X_train = pd.DataFrame(scaled_data, columns=columns)

X_train

scaled_test = scaler.transform(X_test)
X_test = pd.DataFrame(scaled_test, columns=columns)

X_test

tree = DecisionTreeClassifier(random_state=10)

tree.fit(X_train, y_train)

pred = tree.predict(X_test)

tree.score(X_train, y_train)

accuracy_score(y_test, pred)

confusion_matrix(y_test, pred)

forest = RandomForestClassifier(random_state=10)

forest.fit(X_train, y_train)

pred_f = forest.predict(X_test)

accuracy_score(y_test, pred_f)

confusion_matrix(y_test, pred_f)

svm_clf = SVC(random_state=10)
svm_clf.fit(X_train, y_train)

pred_s = svm_clf.predict(X_test)

accuracy_score(y_test, pred_s)

confusion_matrix(y_test, pred_s)

# the numbers before smote
num_before = dict(Counter(y))

#perform smoting

# define pipeline
over = SMOTE(sampling_strategy=0.8)
under = RandomUnderSampler(sampling_strategy=0.8)
steps = [('o', over), ('u', under)]
pipeline = Pipeline(steps=steps)

# transform the dataset
X_smote, y_smote = pipeline.fit_resample(X, y)


#the numbers after smote
num_after =dict(Counter(y_smote))

num_before

num_after

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=10)

scaler = StandardScaler()
scaled_data = scaler.fit_transform(X_train)

X_train = pd.DataFrame(scaled_data, columns=columns)

scaled_test = scaler.transform(X_test)
X_test = pd.DataFrame(scaled_test, columns=columns)

forest_s = RandomForestClassifier(random_state=5)

forest_s.fit(X_train, y_train)
pred_s = forest_s.predict(X_test)

accuracy_score(y_test, pred_s)

confusion_matrix(y_test, pred_s)

"""### Neural Network"""

import pandas
from tensorflow import keras
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from tensorflow.keras.wrappers.scikit_learn import KerasClassifier
from sklearn.model_selection import cross_val_score
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import StratifiedKFold
from sklearn.preprocessing import StandardScaler
from sklearn.pipeline import Pipeline

model = Sequential([
    Dense(8, activation='relu'),
    Dense(32, activation='relu'),
    Dense(1, activation='sigmoid')
])

model.compile(loss='binary_crossentropy', optimizer='Adam', metrics=['accuracy'])

model.fit(X_train, y_train, epochs=100)

p = model.predict(X_test)

pred = np.round(p)

accuracy_score(y_test, pred)

confusion_matrix(y_test, pred)

model.save("NN.h5")

model.save_weights("NN_Weight.h5")

"""### Logistic Regression"""

from sklearn.linear_model import LogisticRegression

log_reg = LogisticRegression(random_state=10)

log_reg.fit(X_train, y_train)
pred = log_reg.predict(X_test)

accuracy_score(y_test, pred)

import seaborn as sns
cm=confusion_matrix(y_test,pred)
conf_matrix=pd.DataFrame(data=cm,columns=['Predicted:0','Predicted:1'],index=['Actual:0','Actual:1'])
plt.figure(figsize = (8,5))
sns.heatmap(conf_matrix, annot=True,fmt='d',cmap="YlGnBu")

"""### Ensemble All"""

from sklearn.ensemble import VotingClassifier

voting_clf = VotingClassifier(
estimators=[('lr', log_reg), ('rf', forest),('dt', tree)], voting='hard')
voting_clf.fit(X_train, y_train)

pred = voting_clf.predict(X_test)

accuracy_score(y_test, pred)

confusion_matrix(y_test, pred)

import seaborn as sns
cm=confusion_matrix(y_test,pred)
conf_matrix=pd.DataFrame(data=cm,columns=['Predicted:0','Predicted:1'],index=['Actual:0','Actual:1'])
plt.figure(figsize = (8,5))
sns.heatmap(conf_matrix, annot=True,fmt='d',cmap="YlGnBu")